---
title: Query
---

# Query

Load data from the server and subscribe to any changes of fields we detect from mutations, subscriptions, and other queries.

```svelte
<script>
    import { query, graphql } from '$houdini'
    const { data, refetch, loading, error } = query(graphql`
        query MyQuery {
            myField
        }
    `)
</script>
```

### Inputs

1. A string tagged with `graphql` containing a single document with one named query

### Return Values

`query` returns a single object with the following keys:

- `data` is a store containing the result of the query. It's value will update as mutations, subscriptions, and other queries provide more recent information.
- `refetch` is a function that will refetch the query with a new set of arguments.
- `loading` is a store containing the loading state (`true` or `false`) for a query found outside of a route component (ie, not defined in `src/routes`)
- `error` is a store containing any error values that occur for a query found outside of a route component (ie, not defined in `src/routes`)

## Query Variables

At the moment, query variables are declared as a function in the module context of your component.
This function must be named after your query and in a sapper application, it takes the same arguments
that are passed to the `preload` function described in the [Sapper](https://sapper.svelte.dev/docs#Pages)
documentation. In a SvelteKit project, this function takes the same arguments passed to the `load` function
described in the [SvelteKit](https://kit.svelte.dev/docs#Loading) docs. Regardless of the framework, you can return
the value from `this.error` and `this.redirect` in order to change the behavior of the response. Here is a
modified example from the [demo](./example):

```svelte
<!-- src/routes/[filter].svelte -->

<script lang="ts">
    import { query, graphql, AllItems } from '$houdini'

    // load the items
    const { data } = query<AllItems>(graphql`
        query AllItems($completed: Boolean) {
            items(completed: $completed) {
                id
                text
            }
        }
    `)
</script>

<script context="module" lang="ts">
    // This is the function for the AllItems query.
    // Query variable functions must be named <QueryName>Variables.
    export function AllItemsVariables(page): AllItems$input {
        // make sure we recognize the value
        if (!['active', 'completed'].includes(page.params.filter)) {
            return this.error(400, "invalid filter")
        }

        return {
            completed: page.params.filter === 'completed',
        }
    }
</script>

{#each $data.items as item}
    <div>{item.text}</div>
{/each}
```

## Paginated Queries

Paginated must use the `paginatedQuery` function exported from your runtime and contain the `@paginate` directive on the appropriate field. For more information Houdini's support for pagination, please visit the [Pagination guide](/guides/pagination).

```svelte
<script>
    import { paginatedQuery, graphql } from '$houdini'
    const { data, loadNextPage } = paginatedQuery(graphql`
        query UserList {
            friends(last: 10) @paginate {
                edges {
                    node {
                        id
                    }
                }
            }
        }
    `)
</script>
```

### Return Values

`paginatedQuery` returns the same values as `query` with a few additions:

- `loadNextPage` is an async function that loads the next page. It takes one optional argument: the page size to load for the next request.
- `loadPreviousPage` is an async function that loads the previous page. It takes one optional argument: the page size to load for the next request.
- `loading` is a store containing a boolean value that tracks the loading state of the pagination requests
- `pageInfo` is a store that contains the page info (`hasPreviousPage`, `hasNextPage`, etc.) Only valid for cursor-based pagination.

## Caching Data

By default, houdini will only try to load queries against its local cache when you indicate it is safe to do so.
This can be done with the `@cache` directive:

```graphql
query AllItems @cache(policy: CacheOrNetwork) {
	items {
		id
		text
	}
}
```

There are 3 different policies that can be specified:

- **CacheOrNetwork** will first check if a query can be resolved from the cache. If it can, it will return the cached value and only send a network request if data was missing.
- **CacheAndNetwork** will use cached data if it exists and always send a network request after the component has mounted to retrieve the latest data from the server
- **NetworkOnly** will never check if the data exists in the cache and always send a network request

The default cache policy as well as other parameters can be changed in your [config file](/api/config).

## Loading State

The methods used for tracking the loading state of your queries changes depending
on the context of your component. For queries that live in routes (ie, in
`/src/routes/...`), the actual query happens in a `load` function as described
in [What about load?](#what-about-load). Because of this, the best way to track
if your query is loading is to use the
[navigating store](https://kit.svelte.dev/docs#modules-$app-stores) exported from `$app/stores`:

```svelte
<!-- src/routes/index.svelte -->

<script>
    import { query } from '$houdini'
    import { navigating } from '$app/stores'

    const { data } = query(...)
</script>

{#if $navigating}
    loading...
{:else}
    data is loaded!
{/if}
```

However, since queries inside of non-route components (ie, ones that are not defined in `/src/routes/...`)
do not get hoisted to a `load` function, the recommended practice to is use the store returned from
the result of query:

```svelte
 <!-- src/components/MyComponent.svelte -->

<script>
    import { query } from '$houdini'

    const { data, loading } = query(...)
</script>

{#if $loading}
    loading...
{:else}
    data is loaded!
{/if}
```

## Hooks

Sometimes you will need to add additional logic to a component's query. For example, you might want to
check if the current session is valid before a query is sent to the server. In order to support this,
houdini will look for hook functions defined in the module context which can be used to perform
any logic you need.

### `beforeLoad`

Called before Houdini executes load queries against the server. You can expect the same
arguments as SvelteKit's [`load`](https://kit.svelte.dev/docs#loading) hook.

If you return a value from this function, it will be passed as props to your component.

```svelte
<script context="module">
    // It has access to the same arguments,
    // this.error, and this.redirect as the variable functions
    export function beforeLoad({page, session}){
        if(!session.authenticated){
            return this.redirect(302, '/login')
        }

    	return {
    	    message: "There are this many items"
        }
    }
</script>

<script>
    import { query, graphql } from '$houdini'

    export let message

    // load the items
    const { data } = query(graphql`
        query AllItems {
            items {
                id
            }
        }
    `)
</script>

{message}: {$data.items.length}
```

### `afterLoad`

Called after Houdini executes load queries against the server. You can expect the same
arguments as SvelteKit's [`load`](https://kit.svelte.dev/docs#loading) hook, plus an additional
`data` property referencing query result data.

If you return a value from this function, it will be passed as props to your component.

```svelte
<script context="module">
    export function MyProfileVariables({ page: { params: { id } } }) {
        return { id }
    }
    export function afterLoad({ data }){
        if(!data.MyProfile){
            return this.error(404)
        }
    }
</script>

<script>
    import { query, graphql } from '$houdini'

    // load the items
    const { data } = query(graphql`
        query MyProfile {
            profile(id) {
                name
            }
        }
    `)
</script>

Hello I'm {$data.profile.name}
```
