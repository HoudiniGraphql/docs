---
title: Real-Time Updates
---

# Real-Time Updates

Updating your data in real-time is a very common requirement of a modern application. In Houdini, getting real-time updates from your server is done by relying on GraphQL Subscriptions. They look a lot like queries (except for the `subscription` keyword):

```graphql
subscription TrackSpeciesFavorite {
	speciesFavoriteToggled(id: 1) {
		species {
			favorite
		}
	}
}
```

You can think of a subscription like an event-handler. When the favorite status of a species is toggled, it triggers the `speciesFavoriteToggled` event which we listen to by providing the subscription to the server. The server will send the client the requested fields whenever the event is triggered.

Let's see a subscription in action. Go ahead and add the block of code at the end of your `script` tag in the route:

```svelte
<script>
    import { subscription } from '$houdini'

    subscription(graphql`
        subscription TrackSpeciesFavorite {
            speciesFavoriteToggled(id: 1) {
                species {
                    favorite
                }
            }
        }
    `)
</script>
```

Regenerate your runtime and open up two browsers. Make sure they are both pointing at the same species and click on the favorite star. You should see the favorite status of the species toggle in both browsers.

## List Operations From Subscriptions

You probably noticed that the species does not show up in the favorites list if the update came from another browser. That's because Houdini does not know that the payload from a subscription needs to toggle the species like the mutation does. Fixing this should look very familiar - just mix in the `FavoriteSpecies_toggle` toggle we talked about in the [mutations section](/intro/mutations):

```graphql
subscription TrackSpeciesFavorite {
	speciesFavoriteToggled(id: 1) {
		species {
			favorite
			...FavoriteSpecies_toggle
		}
	}
}
```

Now that your application is responding to these subscription events, we need to make sure that the `ToggleFavorite` mutation doesn't overwrite the changes made by the subscription. You should remove the `FavoriteSpecies_toggle` from the `ToggleFavorite` mutation before generating your runtime.

That's all it takes! You should now see a species be added and removed from the list as you click on the star in a separate browser. There's a lot more that you can do with subscriptions but a majority of the use cases boil down to what you see here.

## What's next?

This is the last topic we wanted to cover as part of the guide! Thank you so much for getting all the way through - we really appreciate the dedication. If there were any sections that were confusing, or changes you think would be helpful, please open up a discussion on Github.

If you want to read more about what Houdini can do, please check out the [guides](/guides) which offer a more in-depth coverage of a variety of topics.
