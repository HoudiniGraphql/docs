---
title: Subscription
index: 4
description: Subscriptions in Houdini
---

<script>
    import { HeaderWithMode } from '~/components'
</script>

<HeaderWithMode title="Subscription" />

Listen for real-time updates from your server using GraphQL Subscriptions.

```svelte
<script>
	import ItemUpdate from '$houdini/stores/ItemUpdate'

	ItemUpdate.listen({ id: itemID })
</script>

latestValue: {$ItemUpdate.item.text}
```

### Store Methods

A subscription store holds onto the latest value from the subscription and has the following methods:

- `listen`: takes an optional object to use as variables and causes the store to start listening for events
- `unlisten`: causes the store to stop listening. This gets called automatically when using the `$` syntax to retrieve the value

## List Operations

Subscription bodies can contain all of the list operations described in [this document](/api/graphql).

## Configuring the client

Houdini can work with any websocket client as long as you can provide an object that satisfies
the `SubscriptionHandler` interface as the second argument to the HoudiniClient's constructor. Keep in mind
that WebSocket connections only exist between the browser and your API, therefor you must remember to
pass `null` when configuring your environment on the rendering server.

### Using `graphql-ws`

If your API supports the [`graphql-ws`](https://github.com/enisdenjo/graphql-ws) protocol, you can create a
client and pass it directly:

```typescript
// client.ts

import { createClient } from 'graphql-ws'
import { browser } from '$app/env'

// in sapper, this would be something like `(process as any).browser`
let socketClient = browser
	? new createClient({
			url: 'ws://api.url'
	  })
	: null

export default new HoudiniClient(fetchQuery, socketClient)
```

### Using `subscriptions-transport-ws`

If you are using the deprecated `subscriptions-transport-ws` library and associated protocol,
you will have to slightly modify the above block:

```typescript
// client.ts

import { SubscriptionClient } from 'subscriptions-transport-ws'
import { browser } from '$app/env'

let socketClient: SubscriptionHandler | null = null
if (browser) {
	// instantiate the transport client
	const client = new SubscriptionClient('ws://api.url', {
		reconnect: true
	})

	// wrap the client in something houdini can use
	socketClient = {
		subscribe(payload, handlers) {
			// send the request
			const { unsubscribe } = client.request(payload).subscribe(handlers)

			// return the function to unsubscribe
			return unsubscribe
		}
	}
}

export default new HoudiniClient(fetchQuery, socketClient)
```
