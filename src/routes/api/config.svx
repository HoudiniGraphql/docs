---
title: Config
index: 6
description: A description of every valid configuration value for Houdini.
---

# Config File

All configuration for your houdini application is defined in a single file that is imported by both the runtime and the command-line tool (called `houdini.config.js`). Because of this, you must make sure that any imports and logic are resolvable in both environments. This means that if you rely on process.env or other node-specifics you will have to use a plugin to replace the expression with something that can run in the browser.

## Fields

It can contain the following values:

- `sourceGlob`: a glob telling the runtime generator where to look for your graphql documents
- `framework`: One of `"kit"`, `"sapper"`, or `"svelte"`. Used to tell the preprocessor what kind of loading paradigm to generate for you.
- `module`: One of `"esm"` or `"commonjs"`. Used to tell the artifact generator what kind of modules to create.
- `schemaPath` (optional): the path to the static representation of your schema. One of `schema` or `schemaPath` is required
- `schema` (optional): a string containing your entire schema (mostly useful for testing). One of `schema` or `schemaPath` is required
- `quiet` (optional): A boolean silencing the the output from the runtime generator
- `apiUrl` (optional): A url to use to pull the schema. For more information see the [generate command docs](/api/cli#generate)
- `static` (optional): A boolean that tells the preprocessor to treat every component as a non-route. This is useful for projects built with the static-adapter
- `scalars` (optional): An object describing custom scalars for your project (see below).
- `cacheBufferSize` (optional): The number of queries that must occur before a value is removed from the cache. For more information, see the [caching data docs](/api/query#caching-data).
- `defaultCachePolicy` (optional): The default cache policy to use for queries. For a list of the policies or other information see the [caching data docs](/api/query#caching-data).

## Custom Scalars

Configuring your runtime to handle custom scalars is done under the `scalars` key in your config:

```javascript
// houdini.config.js

export default {
	// ...

	scalars: {
		// the name of the scalar we are configuring
		DateTime: {
			// the corresponding typescript type
			type: 'Date',
			// turn the api's response into that type
			unmarshal(val) {
				return new Date(val)
			},
			// turn the value into something the API can use
			marshal(date) {
				return date.getTime()
			}
		}
	}
}
```
